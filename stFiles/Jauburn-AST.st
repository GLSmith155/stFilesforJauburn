Object subclass: #JbAbstractSyntaxTreeNode	instanceVariableNames: ''	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbAbstractSyntaxTreeNode commentStamp: '' prior: 0!I am an abstract class.  My descendents are abstract syntax tree nodes.  Except for the interpreter, I don't define any API methods since the nodes have no methods in common.!!JbAbstractSyntaxTreeNode methodsFor: '*Jauburn-Interpreter'!executeIn: aContext	self error: 'Statements must override this method.  Expressions _must not_ override this method since it is an error to send #executeIn: to an expression.'! !!JbAbstractSyntaxTreeNode methodsFor: '*Jauburn-Interpreter'!evaluateIn: aContext	self error:		'Expressions must override this method.  Statements _must not_ override this method since it is an error to send #evaluateIn: to a statement.'! !JbAbstractSyntaxTreeNode subclass: #JbArity2OperatorNode	instanceVariableNames: 'lhs rhs'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbArity2OperatorNode methodsFor: 'accessing'!rhs	^ rhs! !!JbArity2OperatorNode methodsFor: 'accessing'!operator	^ self subclassResponsibility ! !!JbArity2OperatorNode methodsFor: 'accessing'!lhs: anObject	lhs := anObject! !!JbArity2OperatorNode methodsFor: 'accessing'!lhs	^ lhs! !!JbArity2OperatorNode methodsFor: 'accessing'!rhs: anObject	rhs := anObject! !!JbArity2OperatorNode methodsFor: '*Jauburn-Interpreter'!evaluateIn: environment	| lhsValue rhsValue |	lhsValue := self lhs evaluateIn: environment.	rhsValue := self rhs evaluateIn: environment.	self operator = $*		ifTrue: [ ^lhsValue * rhsValue ].	self operator = $+		ifTrue: [ ^lhsValue + rhsValue ]! !JbArity2OperatorNode subclass: #JbAdditionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbAdditionNode methodsFor: 'accessing'!operator	^ $+! !JbAbstractSyntaxTreeNode subclass: #JbConstantExpressionNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbConstantExpressionNode methodsFor: '*Jauburn-Interpreter'!evaluateIn: environment	^self value! !!JbConstantExpressionNode methodsFor: 'accessing'!value	^ value! !!JbConstantExpressionNode methodsFor: 'accessing'!value: anObject	value := anObject! !JbAbstractSyntaxTreeNode subclass: #JbFunctionCallNode	instanceVariableNames: 'identifier arguments'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbFunctionCallNode methodsFor: 'accessing'!arguments: anObject	arguments := anObject! !!JbFunctionCallNode methodsFor: 'accessing'!arguments	^ arguments! !!JbFunctionCallNode methodsFor: 'accessing'!identifier	^ identifier! !!JbFunctionCallNode methodsFor: 'accessing'!identifier: anObject	identifier := anObject! !JbAbstractSyntaxTreeNode subclass: #JbFunctionDefinitionNode	instanceVariableNames: 'body parameters'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbFunctionDefinitionNode methodsFor: 'accessing'!parameters	^ parameters! !!JbFunctionDefinitionNode methodsFor: 'accessing'!body: anObject	body := anObject! !!JbFunctionDefinitionNode methodsFor: 'accessing'!parameters: anObject	parameters := anObject! !!JbFunctionDefinitionNode methodsFor: 'accessing'!body	^ body! !JbAbstractSyntaxTreeNode subclass: #JbIdentifierExpressionNode	instanceVariableNames: 'identifier'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbIdentifierExpressionNode methodsFor: 'accessing'!identifier	^ identifier! !!JbIdentifierExpressionNode methodsFor: 'accessing'!identifier: anObject	identifier := anObject! !!JbIdentifierExpressionNode methodsFor: '*Jauburn-Interpreter'!evaluateIn: environment 	^environment at: self identifier! !JbArity2OperatorNode subclass: #JbMultiplicationNode	instanceVariableNames: ''	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbMultiplicationNode methodsFor: 'accessing'!operator	^ $*! !JbArity2OperatorNode subclass: #JbNumericComparisonNode	instanceVariableNames: 'operator'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbNumericComparisonNode commentStamp: '' prior: 0!Numeric comparison.  Note: unlike numeric operations, comparisons are all instances of this class but with different values for the operator.  There are no separate subclasses for equality, less than or equal to and so on.  Honestly, this approach could have been used in arithmetic as well but I didn't want to change it post-lecture video.!!JbNumericComparisonNode methodsFor: 'accessing'!operator	^ operator! !!JbNumericComparisonNode methodsFor: 'accessing'!operator: anObject	operator := anObject! !!JbNumericComparisonNode methodsFor: '*Jauburn-Interpreter'!evaluateIn: environment	| lhsValue rhsValue |	lhsValue := self lhs evaluateIn: environment.	rhsValue := self rhs evaluateIn: environment.	self operator = '<' ifTrue: [ ^ lhsValue < rhsValue ].	self operator = '>' ifTrue: [ ^ lhsValue > rhsValue ].	self operator = '<=' ifTrue: [ ^ lhsValue <= rhsValue ].	self operator = '>=' ifTrue: [ ^ lhsValue >= rhsValue ].	self operator = '==' ifTrue: [ ^ lhsValue = rhsValue ].	self operator = '!!=' ifTrue: [ ^ lhsValue ~= rhsValue ].	self error: 'Unrecognized operator: ' , self operator asString! !JbAbstractSyntaxTreeNode subclass: #JbProgramNode	instanceVariableNames: 'statements'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbProgramNode methodsFor: 'accessing'!statements: anObject	statements := anObject! !!JbProgramNode methodsFor: 'accessing'!statements	^ statements! !!JbProgramNode methodsFor: '*Jauburn-Interpreter'!executeIn: environment	statements do: [ :each | each executeIn: environment ]! !JbAbstractSyntaxTreeNode subclass: #JbReturnStatementNode	instanceVariableNames: 'expression'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbReturnStatementNode methodsFor: 'accessing'!expression: anObject	expression := anObject! !!JbReturnStatementNode methodsFor: 'accessing'!expression	^ expression! !JbAbstractSyntaxTreeNode subclass: #JbVariableDeclarationStatementNode	instanceVariableNames: 'identifier expression'	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbVariableDeclarationStatementNode methodsFor: 'accessing'!expression: anObject	expression := anObject! !!JbVariableDeclarationStatementNode methodsFor: 'accessing'!expression	^ expression! !!JbVariableDeclarationStatementNode methodsFor: 'accessing'!identifier	^ identifier! !!JbVariableDeclarationStatementNode methodsFor: 'accessing'!identifier: anObject	identifier := anObject! !!JbVariableDeclarationStatementNode methodsFor: '*Jauburn-Interpreter'!executeIn: environment	environment at: self identifier put: (self expression evaluateIn: environment)! !JbVariableDeclarationStatementNode subclass: #JbAssignmentStatementNode	instanceVariableNames: ''	classVariableNames: ''	package: 'Jauburn-AST-Core'!!JbAssignmentStatementNode methodsFor: '*Jauburn-Interpreter'!executeIn: environment	environment		lookupAt: self identifier		put: (self expression evaluateIn: environment)! !JbAbstractSyntaxTreeNode subclass: #JbPrintStatementNode	instanceVariableNames: 'expression'	classVariableNames: ''	package: 'Jauburn-AST'!!JbPrintStatementNode methodsFor: '*Jauburn-Interpreter'!executeIn: anEnvironment	| value |	value := expression evaluateIn: anEnvironment.	Transcript		show: value;		cr! !!JbPrintStatementNode methodsFor: 'accessing'!expression: anObject	expression := anObject! !!JbPrintStatementNode methodsFor: 'accessing'!expression	^ expression! !PackageManifest subclass: #ManifestJauburnAST	instanceVariableNames: ''	classVariableNames: ''	package: 'Jauburn-AST-Manifest'!!ManifestJauburnAST commentStamp: '' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestJauburnAST class	instanceVariableNames: ''!!ManifestJauburnAST class methodsFor: 'code-critics'!ruleRBNoClassCommentRuleV1FalsePositive	^ #(#(#(#RGPackage #(#'Jauburn-AST')) #'2019-07-26T16:07:56.982481-04:00') )! !